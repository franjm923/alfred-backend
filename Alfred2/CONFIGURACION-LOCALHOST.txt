# ‚úÖ Configuraci√≥n Completada para Localhost

## üìù Resumen de Cambios

Se actualiz√≥ el archivo `appsettings.json` con todas las variables necesarias para correr en localhost:

### Variables Agregadas:

#### Google Calendar (NUEVAS)
- ‚úÖ GCAL_REDIRECT_URI: http://localhost:10000/calendar/oauth-callback
- ‚úÖ GCAL_SCOPES: https://www.googleapis.com/auth/calendar.events

#### Twilio WhatsApp
- ‚úÖ TWILIO_ACCOUNT_SID
- ‚úÖ TWILIO_AUTH_TOKEN  
- ‚úÖ TWILIO_FROM: whatsapp:+14155238886

#### Frontend & CORS
- ‚úÖ ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173
- ‚úÖ FRONTEND_REDIRECT_URL: http://localhost:3000/home
- ‚úÖ PUBLIC_BASE_URL: http://localhost:10000

#### Feature Flags
- ‚úÖ FeatureFlags:INTENT_MODE: simple
- ‚úÖ FeatureFlags:CALENDAR_MODE: simulate
- ‚úÖ FeatureFlags:PERSIST_TURNOS: true

#### WhatsApp Provider
- ‚úÖ WH_PROVIDER: twilio
- ‚úÖ WHATSAPP_VERIFY_TOKEN: alfred_verify_token_local

## üìã Variables que Debes Configurar

### Obligatorias para Login:
```json
"GOOGLE_CLIENT_ID": "tu-id.apps.googleusercontent.com",
"GOOGLE_CLIENT_SECRET": "GOCSPX-tu-secret",
"ConnectionStrings": {
  "DefaultConnection": "Host=localhost;Port=5432;Database=alfred;Username=postgres;Password=TU_PASSWORD"
}
```

### Opcionales (solo si usas OpenAI LLM):
```json
"OpenAI": {
  "ApiKey": "sk-proj-tu-key"
}
```

### Opcionales (solo si pruebas WhatsApp):
```json
"TWILIO_ACCOUNT_SID": "ACxxxx",
"TWILIO_AUTH_TOKEN": "tu-token"
```

## üöÄ C√≥mo Ejecutar

### 1. Configurar Base de Datos
```bash
# Crear database en PostgreSQL
createdb alfred
```

### 2. Actualizar appsettings.json
Edita `Backend/Alfred2/appsettings.json`:
- ConnectionString con tu password de PostgreSQL
- GOOGLE_CLIENT_ID y GOOGLE_CLIENT_SECRET

### 3. Ejecutar Backend
```bash
cd Backend/Alfred2
dotnet run
```

Backend disponible en: http://localhost:10000

### 4. Verificar
- Health check: http://localhost:10000/healthz
- Debe responder: {"status":"ok"}

### 5. Ejecutar Frontend (opcional)
```bash
cd Frontend/FrontendWeb
npm install
npm run dev
```

Frontend disponible en: http://localhost:3000

## üìö Archivos Creados

1. **appsettings.json** - Actualizado con todas las variables para localhost
2. **.env.example** - Documentaci√≥n de todas las variables disponibles
3. **LOCALHOST.md** - Gu√≠a completa paso a paso
4. **verify-localhost.ps1** - Script de verificaci√≥n autom√°tica

## üîç Diferencias Localhost vs Render

| Variable | Localhost | Render (Production) |
|----------|-----------|---------------------|
| GCAL_REDIRECT_URI | http://localhost:10000/calendar/oauth-callback | https://tu-backend.onrender.com/calendar/oauth-callback |
| ALLOWED_ORIGINS | http://localhost:3000 | https://alfred-frontend.vercel.app |
| FRONTEND_REDIRECT_URL | http://localhost:3000/home | https://alfred-frontend.vercel.app/home |
| PUBLIC_BASE_URL | http://localhost:10000 | https://tu-backend.onrender.com |
| FeatureFlags:CALENDAR_MODE | simulate | real |

## ‚úÖ Todo Listo!

El proyecto est√° configurado para correr en localhost. Solo necesitas:

1. ‚úÖ Tener PostgreSQL corriendo
2. ‚úÖ Configurar GOOGLE_CLIENT_ID y GOOGLE_CLIENT_SECRET
3. ‚úÖ Actualizar password de PostgreSQL en ConnectionString
4. ‚úÖ Ejecutar `dotnet run`

Las variables que ya tienes en Render (GCAL_SCOPES, GCAL_REDIRECT_URI) ahora tambi√©n est√°n en `appsettings.json` con valores para localhost.

Para m√°s detalles, revisa: **LOCALHOST.md**
